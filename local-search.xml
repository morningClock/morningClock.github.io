<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>文件/大文件上传功能实现（JS+PHP）</title>
    <link href="/2019/10/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2019/10/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="文件-大文件上传功能实现（JS-PHP）"><a href="#文件-大文件上传功能实现（JS-PHP）" class="headerlink" title="文件/大文件上传功能实现（JS+PHP）"></a>文件/大文件上传功能实现（JS+PHP）</h1><blockquote><p>参考博文：<a href="https://juejin.im/post/5cf765275188257c6b51775f" target="_blank" rel="noopener">掘金-橙红年代  前端大文件上传</a></p><p><a href="https://www.cnblogs.com/rendd/p/10303560.html" target="_blank" rel="noopener">路漫漫 其修远 PHP + JS 实现大文件分割上传</a></p><p>本文是学习文件上传后的学习总结文章，从无到有实现文件上传功能，前端小白写的代码不是最优，如果有错误的地方请多多指教，如果本文对你有所帮助，深感荣幸。</p></blockquote><p>​    近期公司的项目中，涉及到上传大文件的问题，大文件上传用普通表单上传时出现的问题是，无法断点续存，一但中途中断上传，就要重头开始，这很明显不是我们想要的，所以经过一番查询，学习了一下大文件分割上传的方法。并且使用简单的<code>php</code>做服务端处理程序实现一个功能demo，供以后回顾使用。本人也是初出茅庐的前端小白，记录下各种功能的实现总结，代码有错误的地方，请多多指正。</p><h2 id="1-简单文件上传"><a href="#1-简单文件上传" class="headerlink" title="1.简单文件上传"></a>1.简单文件上传</h2><ul><li><h3 id="普通表单上传"><a href="#普通表单上传" class="headerlink" title="普通表单上传"></a>普通表单上传</h3><p>表单上传是我们经常使用的功能，而且使用起来也是非常简单，我们只需要声明表单内容类型为<code>enctype=&quot;multipart/form-data&quot;</code>,表明表单上传文件的二进制数据。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"index.php"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">"multipart/form-data"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"myfile"</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"上传"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></code></pre><p>点击上传按钮，就可以将表单发送到服务器，并使用<code>index.php</code>接受到对应的表单数据，存入<code>$_GET/$_POST</code>超级全局变量中，我们只需要使用<code>move_uploaded_file</code>方法，将接收到的文件数据，存储起来，就实现了文件上传功能了。</p><pre><code class="hljs plain">$myfile &#x3D; $_FILES[&#39;myfile&#39;];&#x2F;&#x2F;上传路径$path &#x3D; &quot;upload&#x2F;&quot; . $myfile[&#39;name&#39;]; if(move_uploaded_file($myfile[&#39;tmp_name&#39;], $path))&#123;  echo &quot;上传成功&quot;;&#125; else&#123;  echo &quot;上传失败&quot;;&#125;;</code></pre></li><li><h3 id="ajax模拟表单上传文件"><a href="#ajax模拟表单上传文件" class="headerlink" title="ajax模拟表单上传文件"></a>ajax模拟表单上传文件</h3><p>当我们有需求，需要异步提交表单或者需要对上传文件做一定修改（例如：裁剪尺寸）时，普通的表单上传就不能满足我们的需求，因为我们无法修改表单的file值，这时候就需要ajax出场了。这里我们使用jQuery使用ajax更方便快捷。</p><p>我们需要做如下修改：</p><ul><li><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a><code>HTML</code></h4><p>我们不需要配置form，只需要配置相应的ID，用于获取DOM元素对象。</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"myForm"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"myfile"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"myFile"</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"上传"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"submitForm"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://code.jquery.com/jquery-1.11.1.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></li><li><h4 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a><code>JQuery</code></h4><p>注意，<code>jQuery</code>的ajax方法，会默认配置一些请求信息，所以我们需要重新配置放置<code>jQuery</code>的默认行为导致数据格式或请求头信息出现问题。</p><p>这里的<code>contentType</code>和<code>processData</code>为必须项。</p><pre><code class="hljs javascript">$(<span class="hljs-string">'#submitForm'</span>).on(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;  <span class="hljs-comment">// 阻止默认表单提交</span>  e.preventDefault();  <span class="hljs-comment">// 创建表单</span>  <span class="hljs-comment">// 默认配置了enctype="multipart/form-data"</span>  <span class="hljs-keyword">var</span> formData = <span class="hljs-keyword">new</span> FormData();  formData.append(<span class="hljs-string">'myfile'</span>,$(<span class="hljs-string">'#myFile'</span>)[<span class="hljs-number">0</span>].files[<span class="hljs-number">0</span>])  <span class="hljs-comment">// 提交表单</span>  $.ajax(&#123;    type: <span class="hljs-string">"POST"</span>,    url: <span class="hljs-string">'post.php'</span>,    data: formData,    <span class="hljs-comment">// 阻止jquery赋予默认属性，使用FormData默认配置enctype="multipart/form-data"</span>    contentType: <span class="hljs-literal">false</span>,    <span class="hljs-comment">// 阻止jquery自动序列化数据</span>    processData: <span class="hljs-literal">false</span>,    success: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'请求正常'</span>,data);    &#125;  &#125;)&#125;)</code></pre></li></ul></li></ul><h2 id="2-大文件分割上传"><a href="#2-大文件分割上传" class="headerlink" title="2.大文件分割上传"></a>2.大文件分割上传</h2><ul><li><h3 id="简单上传痛点"><a href="#简单上传痛点" class="headerlink" title="简单上传痛点"></a>简单上传痛点</h3><p>简单上传，使用表单提交文件到服务器时，如果网络不好或者中途中断，会使文件上传失败，试想一下如果要上传文件很大，当你上传到99%时，突然间中断，又要重新上传，那该有多崩溃，那时你可能电脑的想砸了。</p></li></ul><ul><li><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>大文件上传，实现的方法，就是将上传文件的二进制文件通过分割的形式，逐个上传到服务器，在上传完成后，服务器再对文件进行拼接操作。</p><p>为了能识别上传的数据，是哪个文件，我们必须要拥有一个<code>文件标识符</code>，用于识别接收到的文件数据是属于哪个文件的，以及可以实现避免重复上传，实现秒传功能等。</p><p>不要忘记由于是异步操作，而且操作的数据段大小不一，会导致整合时无法确认拼接熟悉怒，所以我们需要一个index标识数据段的位置。</p><p>通过初步整理，我们就需要以下的参数</p><ol><li>文件唯一标识符</li><li>分割后数据段</li><li>分割数据段的顺序索引值</li></ol><p>经过思考，我们可以建立两个处理程序，来分别处理接受chunk数据段和合并chunk数据段。</p><ol><li><p><code>file_getchunk.php</code></p><p>功能：将分割chunk数据，整理并保存，此处我们用文件形式实现。</p></li><li><p><code>file_integration.php</code></p><p>功能：接收到整合通知，将数据段拼接，并生成文件。</p></li></ol><p>整体流程大致如图：</p><p><img src="1570871712732.png" srcset="/img/loading.gif" alt="1570871712732"></p></li><li><h3 id="PHP-ini配置"><a href="#PHP-ini配置" class="headerlink" title="PHP.ini配置"></a>PHP.ini配置</h3><p>由于PHP默认配合中，限制了POST与上传的大小，所以我们为了测试，需要修改<code>php.ini</code>中的默认配置。</p><pre><code class="hljs ini"><span class="hljs-attr">post_max_size</span> = <span class="hljs-number">50</span>M<span class="hljs-attr">upload_max_filesize</span> = <span class="hljs-number">50</span>M</code></pre></li></ul><ul><li><h3 id="talk-is-cheap-show-me-the-code"><a href="#talk-is-cheap-show-me-the-code" class="headerlink" title="talk is cheap,show me the code"></a>talk is cheap,show me the code</h3><ul><li><p><code>HTML</code></p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://code.jquery.com/jquery-1.11.1.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"myForm"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"file"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"myfile"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"myFile"</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"上传"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"submitForm"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></code></pre></li><li><p><code>JQuery</code></p><p>获取文件对象，文件标识符，分割文件，通过ajax发送切割好的blob数据段。</p><pre><code class="hljs javascript">$(<span class="hljs-string">'#submitForm'</span>).on(<span class="hljs-string">'click'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;  <span class="hljs-comment">// 阻止默认表单提交</span>  e.preventDefault();  <span class="hljs-keyword">var</span> myfile = $(<span class="hljs-string">'#myFile'</span>)[<span class="hljs-number">0</span>].files[<span class="hljs-number">0</span>];  <span class="hljs-comment">// 定义文件标识符  </span>  <span class="hljs-keyword">var</span> fileId = getFileIdentifier(myfile);  <span class="hljs-comment">// 数据切片</span>  <span class="hljs-keyword">var</span> chunks = fileSlice(myfile);  <span class="hljs-comment">// 发送分割数据段</span>sendChunk(fileId, chunks);&#125;)</code></pre><pre><code class="hljs plain"> </code></pre></li></ul></li><li><p>生成文件唯一标识<code>getFileIdentifier()</code></p><p>此处可以使用md5，生成文件唯一的md5（相同文件md5相同），作为标识符。这里只初略的处理了一下文件标识。</p>  <pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFileIdentifier</span>(<span class="hljs-params">file</span>)</span>&#123;  <span class="hljs-comment">// 获取文件标识符</span>  <span class="hljs-keyword">return</span> file.size + file.name;&#125;</code></pre></li></ul><ul><li><p>分割方法<code>fileSlice()</code></p><p>先将文件使用blob文件继承的方法slice进行切割，生成blob字串。</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fileSlice</span>(<span class="hljs-params">file, chunkSize = <span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">0.2</span></span>)</span>&#123;  <span class="hljs-comment">// 1.初始化数据</span>  <span class="hljs-keyword">var</span> totalSize = file.size;<span class="hljs-keyword">var</span> start = <span class="hljs-number">0</span>;  <span class="hljs-keyword">var</span> end = start + chunkSize;  <span class="hljs-keyword">var</span> chunks = [];  <span class="hljs-comment">// 2.使用bolb提供的slice方法切片</span>  <span class="hljs-keyword">while</span>(start &lt; totalSize)&#123;    <span class="hljs-keyword">var</span> chunk = file.slice(start, end);    chunks.push(chunk);    start = end;    end += chunkSize;  &#125;  <span class="hljs-comment">// 3.返回切片组chunk[]</span>  <span class="hljs-keyword">return</span> chunks;&#125;</code></pre></li><li><p>发送chunk方法<code>sendChunk()</code></p><p>使用ajax依次发送已经分割好的chunk，并提供对应的数据，请求<code>file_getchunk.php</code>进行处理。此处task列表，用于保证文件分隔符全部已经完成上传。</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sendChunk</span>(<span class="hljs-params">id, chunks</span>)</span>&#123;  <span class="hljs-comment">// 逐个提交</span>  <span class="hljs-comment">// 用于保证ajax发送完毕</span>  <span class="hljs-keyword">var</span> task = [];  chunks.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">chunk, index</span>)</span>&#123;    <span class="hljs-keyword">var</span> formData = <span class="hljs-keyword">new</span> FormData();    formData.append(<span class="hljs-string">'fileId'</span>, id);    formData.append(<span class="hljs-string">'myFileChunk'</span>, chunk);    formData.append(<span class="hljs-string">'chunkIndex'</span>, index);    $.ajax(&#123;      type: <span class="hljs-string">"POST"</span>,      url: <span class="hljs-string">'file_getchunk.php'</span>,      data: formData,      contentType: <span class="hljs-literal">false</span>,      processData: <span class="hljs-literal">false</span>,      success: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">done</span>)</span>&#123;        <span class="hljs-comment">// 移除已完成任务</span>        task.pop();        <span class="hljs-built_in">console</span>.log(done,<span class="hljs-string">' 已完成'</span>);        <span class="hljs-keyword">if</span> (task.length === <span class="hljs-number">0</span>) &#123;          <span class="hljs-comment">// 发送完毕，整合文件</span>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'通知整合'</span>);          makeFileIntegration(id, chunks.length);        &#125;      &#125;    &#125;)    task.push(<span class="hljs-string">'file Working'</span>);  &#125;)&#125;</code></pre></li><li><p>通知整合方法<code>makeFileIntegration()</code></p><p>接收到整合通知，请求<code>file_integration.php</code>进行文件的整合处理。</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">makeFileIntegration</span>(<span class="hljs-params">id, size</span>)</span>&#123;  <span class="hljs-comment">// 通知已传输完成</span>  $.post(    <span class="hljs-string">"file_integration.php"</span>,    &#123;      id: id,      size: size    &#125;,    <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;      <span class="hljs-built_in">console</span>.log(data);    &#125;  );&#125;</code></pre></li><li><p>PHP- <code>file_getchunk.php</code></p><p>当PHP监听到请求时，获取对应的数据，生成文件夹，按照<code>chunkIndex</code>存储数据段。</p><pre><code class="hljs php"><span class="hljs-keyword">if</span>(!is_dir(<span class="hljs-string">'upload'</span>))&#123;  mkdir(<span class="hljs-string">'upload'</span>, <span class="hljs-number">0777</span>);&#125;$chunk = $_FILES[<span class="hljs-string">'myFileChunk'</span>];<span class="hljs-comment">// 文件唯一标识</span>$fileId = $_POST[<span class="hljs-string">'fileId'</span>];<span class="hljs-comment">// 临时文件夹名称</span>$length = strlen($fileId) - (strlen($fileId) - strpos($fileId, <span class="hljs-string">'.'</span>));$filedir = substr($fileId, <span class="hljs-number">0</span>, $length);$chunkIndex = $_POST[<span class="hljs-string">'chunkIndex'</span>];$filepath = <span class="hljs-string">'upload/'</span> . $filedir;$filename = $filepath . <span class="hljs-string">'/'</span> . $chunkIndex;<span class="hljs-keyword">if</span>(!is_dir($filepath))&#123;  mkdir($filepath, <span class="hljs-number">0777</span>);&#125;move_uploaded_file($chunk[<span class="hljs-string">'tmp_name'</span>], $filename);<span class="hljs-keyword">echo</span> $chunkIndex;</code></pre></li><li><p>PHP-<code>file_integration.php</code></p><p>监听到整合请求，对文件夹下面的所有文件，进行依次拼接，并生成最终还原出来的文件。</p><pre><code class="hljs php">$fileId = $_POST[<span class="hljs-string">'id'</span>];<span class="hljs-comment">// 临时文件夹名称</span>$length = strlen($fileId) - (strlen($fileId) - strpos($fileId, <span class="hljs-string">'.'</span>));$filedir = substr($fileId, <span class="hljs-number">0</span>, $length);$size = $_POST[<span class="hljs-string">'size'</span>];$file = <span class="hljs-string">'./upload/'</span> . $fileId;<span class="hljs-comment">// 创建最终文件</span><span class="hljs-keyword">if</span>(!file_exists($file))&#123;  <span class="hljs-comment">// 最终文件不存在，创建文件</span>  $myfile = fopen($file, <span class="hljs-string">'w+'</span>);  fclose($myfile);&#125; <span class="hljs-comment">// 用增加方式打开最终文件</span>$myfile = fopen($file, <span class="hljs-string">'a'</span>);<span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; $size; $i++) &#123;  <span class="hljs-comment">// 单文件路径</span>  $filePart = <span class="hljs-string">'upload/'</span> . $filedir . <span class="hljs-string">'/'</span> . $i;  <span class="hljs-keyword">if</span>(file_exists($filePart))&#123;    $chunk = file_get_contents($filePart);    <span class="hljs-comment">// 写入chunk</span>    fwrite($myfile, $chunk);  &#125; <span class="hljs-keyword">else</span>&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">"缺少Part$i 文件，请重新上传"</span>;    <span class="hljs-keyword">break</span>;  &#125;&#125;fclose($myfile);<span class="hljs-keyword">echo</span> <span class="hljs-string">"整合完成"</span>;</code></pre></li></ul><h2 id="3-更进一步"><a href="#3-更进一步" class="headerlink" title="3.更进一步"></a>3.更进一步</h2><p>大文件分割上传功能已经基本实现，但是我们还可以拥有很多优化的地方</p><ul><li><h3 id="1-断点续存。"><a href="#1-断点续存。" class="headerlink" title="1.断点续存。"></a>1.断点续存。</h3><p>我们需要的文件已经可以正常的分割上传，服务端也可以正常接收切片，完成数据段切片的合并了。此时我们就可以进一步实现断点续存了。</p><p>断点续存，实现方法很简单，我们只需要获取到上传完成的数据段切片信息，就可以判断我们应该从哪个数据段开始继续传输数据。</p><p>获取已经完成数据段切片的信息，我们可以使用前端保存或者服务端获取。此处我们使用服务端接口检测，返回数据缺失位置来实现断点续存。</p><ul><li><h4 id="思路整理"><a href="#思路整理" class="headerlink" title="思路整理"></a>思路整理</h4><p>我们要在上传前，请求服务端查询出中断时的位置，利用位置信息，筛选上传的数据段切片。</p><p>那么我们要增加的逻辑就是：</p><ol><li><code>offset</code>中断位置信息</li><li>查询中断位置接口：<code>file_get_breakpoint.php</code></li></ol></li><li><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ul><li><p><code>getFileBreakpoint()</code>获取文件断点函数</p><p>此处要保证ajax执行顺序，才能正确获取offset偏移量，实现思路有很多。此处只使用<code>jquery</code>提供的将ajax请求变为同步，进行处理。</p><p>注：同步请求时，success函数返回值不可以直接return，要保存在一个变量中，在ajax请求外return才能生效。</p><pre><code class="hljs javascript"><span class="hljs-comment">// 获取文件断点</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFileBreakpoint</span>(<span class="hljs-params">id, size</span>)</span>&#123;  <span class="hljs-keyword">var</span> offset = <span class="hljs-string">''</span>;  $.ajax(&#123;    type:<span class="hljs-string">"post"</span>,    url:<span class="hljs-string">"file_get_breakpoint.php"</span>,    data: &#123;      id: id,      size: size    &#125;,    <span class="hljs-keyword">async</span>: <span class="hljs-literal">false</span>,    success:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)</span>&#123;      offset = <span class="hljs-built_in">parseInt</span>(res);    &#125;  &#125;)  <span class="hljs-keyword">return</span> offset;&#125;</code></pre></li></ul></li></ul></li></ul><pre><code>- 在`sendChunk()`发送数据前获取`offset`  <pre><code class="hljs javascript"><span class="hljs-comment">// 上传前，请求file_integration.php接口获取数据段开始传输的位置</span><span class="hljs-keyword">var</span> offset = getFileBreakpoint(id, chunks.length);</code></pre>- 遍历chunks发送数据段时，增加筛选逻辑  <pre><code class="hljs javascript">chunks.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">chunk, index</span>)</span>&#123;  <span class="hljs-comment">// ==============新增=================</span>  <span class="hljs-comment">// 从offset开始传输</span>  <span class="hljs-keyword">if</span> (index &lt; offset) &#123;    <span class="hljs-keyword">return</span>;  &#125;  <span class="hljs-comment">// ==============新增=================</span>    <span class="hljs-keyword">var</span> formData = <span class="hljs-keyword">new</span> FormData();  formData.append(<span class="hljs-string">'fileId'</span>, id);  formData.append(<span class="hljs-string">'myFileChunk'</span>, chunk);  formData.append(<span class="hljs-string">'chunkIndex'</span>, index);  $.ajax(&#123;    type: <span class="hljs-string">"POST"</span>,    url: <span class="hljs-string">'file_getchunk.php'</span>,    data: formData,    contentType: <span class="hljs-literal">false</span>,    processData: <span class="hljs-literal">false</span>,    success: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">done</span>)</span>&#123;      task.pop();      <span class="hljs-built_in">console</span>.log(done,<span class="hljs-string">' 已完成'</span>);      <span class="hljs-keyword">if</span> (task.length === <span class="hljs-number">0</span>) &#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'通知整合'</span>);        makeFileIntegration(id, chunks.length);      &#125;    &#125;  &#125;)  task.push(index+<span class="hljs-string">' is Working'</span>);&#125;)</code></pre>- 获取中断位置接口`file_get_breakpoint.php`  这里使用的获取中断位置的逻辑很简单（不是最优），只需要检测文件夹是否存在，再依次检测数据段是否缺失。缺失时返回缺失段的`index`，已存在返回chunks长度`size`，不存在时返回`0`  <pre><code class="hljs javascript"><span class="hljs-comment">// 1.检测数据文件是否存在(文件标识，数据段总数)</span>$fileId = $_POST[<span class="hljs-string">'id'</span>];$size = $_POST[<span class="hljs-string">'size'</span>];<span class="hljs-comment">// 临时文件夹名称</span>$length = strlen($fileId) - (strlen($fileId) - strpos($fileId, <span class="hljs-string">'.'</span>));$filedir = substr($fileId, <span class="hljs-number">0</span>, $length);<span class="hljs-comment">// 2.按顺序检测缺失的数据段的位置</span><span class="hljs-comment">// 检测是否存在文件夹</span><span class="hljs-keyword">if</span> (is_dir(<span class="hljs-string">"upload/$filedir"</span>)) &#123;  $offset = $size;  <span class="hljs-comment">// 检测数据段缺失下标</span>  <span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; $size; $i++) &#123;    $filepath = <span class="hljs-string">"upload/$filedir/$i"</span>;    <span class="hljs-keyword">if</span>(!file_exists($filepath))&#123;      <span class="hljs-comment">// 缺失i部分</span>      $offset = $i;      <span class="hljs-keyword">break</span>;    &#125;  &#125;  <span class="hljs-comment">// 输出偏移量</span>  echo $offset;&#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 是否存在已合并文件</span>  <span class="hljs-keyword">if</span>(file_exists(<span class="hljs-string">"upload/$fileId"</span>))&#123;    echo $size;  &#125; <span class="hljs-keyword">else</span>&#123;    <span class="hljs-comment">// 文件尚未上传</span>    echo <span class="hljs-number">0</span>;  &#125;&#125;</code></pre></code></pre><ul><li><h3 id="2-文件秒传"><a href="#2-文件秒传" class="headerlink" title="2.文件秒传"></a>2.文件秒传</h3><p>文件秒传的概念，按照我的理解，就是在上传文件请求后，服务器端检测数据库中是否存在相同的文件，如果存在相同的文件，就可以告诉用户上传完成了。</p><p>此处在获取offset后，增加一个判断就可以实现</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> offset = getFileBreakpoint(id, chunks.length);<span class="hljs-comment">// 增加判断</span><span class="hljs-keyword">if</span>(chunks.length === offset) &#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'文件已经上传完成'</span>);  <span class="hljs-keyword">return</span>;&#125;</code></pre><p>当然，这里仅仅是非常简单的处理，我们还可以使用MD5来作为文件标识符，在在服务器端使用这个标识符是否存在相同文件。</p></li><li><h3 id="3-MD5检测文件完整性。"><a href="#3-MD5检测文件完整性。" class="headerlink" title="3.MD5检测文件完整性。"></a>3.MD5检测文件完整性。</h3><p>通过md5对文件加密，传输到服务器端，服务器端实现合并后对文件再进行一次md5加密，比对两串md5字串是否相同，就可以知道文件传输过程中是否完整。</p></li><li><h3 id="3-上传完成后，存储数据段文件夹进行删除操作。"><a href="#3-上传完成后，存储数据段文件夹进行删除操作。" class="headerlink" title="3.上传完成后，存储数据段文件夹进行删除操作。"></a>3.上传完成后，存储数据段文件夹进行删除操作。</h3><p>我们最后做一步就是将临时文件移除操作，在整合完成后，我们只需要在<code>file_integration.php</code>接口中，整合完成后，移除文件夹及其下面的所有文件。</p><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deldir</span><span class="hljs-params">($path)</span></span>&#123;   <span class="hljs-comment">//如果是目录则继续</span>  <span class="hljs-keyword">if</span>(is_dir($path))&#123;      <span class="hljs-comment">//扫描一个文件夹内的所有文件夹和文件并返回数组</span>    $p = scandir($path);    <span class="hljs-keyword">foreach</span>($p <span class="hljs-keyword">as</span> $val)&#123;      <span class="hljs-comment">//排除目录中的.和..</span>      <span class="hljs-keyword">if</span>($val !=<span class="hljs-string">"."</span> &amp;&amp; $val !=<span class="hljs-string">".."</span>)&#123;        <span class="hljs-comment">//如果是目录则递归子目录，继续操作</span>        <span class="hljs-keyword">if</span>(is_dir($path.$val))&#123;          <span class="hljs-comment">//子目录中操作删除文件夹和文件</span>          deldir($path.$val.<span class="hljs-string">'/'</span>);          <span class="hljs-comment">//目录清空后删除空文件夹</span>          @rmdir($path.$val.<span class="hljs-string">'/'</span>);        &#125;<span class="hljs-keyword">else</span>&#123;          <span class="hljs-comment">//如果是文件直接删除</span>          unlink($path.$val);        &#125;      &#125;    &#125;    <span class="hljs-comment">// 删除文件夹</span>    rmdir($path);  &#125;&#125;<span class="hljs-comment">//删除临时文件夹</span>deldir(<span class="hljs-string">"upload/$filedir/"</span>);</code></pre></li></ul><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>按照上述步骤，可以跟着实现简单上传、大文件分割上传、断点续存等知识，起码下次遇到上传文件，心里也有了点底气。由于本人是前端小白，所以写的代码比较简陋，只是实现了功能，还有许多可以优化的地方，如果代码有误，还望指正。</p>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端常用功能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS清除浮动</title>
    <link href="/2019/08/07/CSS%20%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/"/>
    <url>/2019/08/07/CSS%20%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS清除浮动方法汇总"><a href="#CSS清除浮动方法汇总" class="headerlink" title="CSS清除浮动方法汇总"></a>CSS清除浮动方法汇总</h1><h2 id="1-增加空div浮动盒子"><a href="#1-增加空div浮动盒子" class="headerlink" title="1.增加空div浮动盒子"></a>1.增加空div浮动盒子</h2><p>增加一个空div在浮动元素后面，并设置clear:both属性</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 浮动元素 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"img-left"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">""</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 清除浮动clear:both --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"clear: both;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><h2 id="2-overflow"><a href="#2-overflow" class="headerlink" title="2.overflow"></a>2.overflow</h2><p>在浮动元素的父元素上设置了 overflow 的值为 hidden 或 auto ，可以闭合浮动。</p><p>注意在 IE6 中还需要触发 hasLayout ，例如为父元素设置容器宽高或设置 zoom：1</p><p>我们可以使用overflow触发BFC（overflow不为visible触发），来触发独立渲染区域，并且利用其渲染规则中的第六条，计算其元素的高度包括浮动元素。</p><p><strong>html结构</strong></p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 包裹元素 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"wrapper"</span>&gt;</span>      <span class="hljs-comment">&lt;!-- 浮动元素 --&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"left"</span>&gt;</span>我是浮动元素<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"left"</span>&gt;</span>我也是浮动元素<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></code></pre><p><strong>CSS样式</strong></p><pre><code class="hljs css"><span class="hljs-selector-class">.left</span>&#123;    <span class="hljs-attribute">float</span>: left;&#125;<span class="hljs-selector-class">.wrapper</span>&#123;    <span class="hljs-attribute">overflow</span>: hidden;    <span class="hljs-attribute">zoom</span>: <span class="hljs-number">1</span>; <span class="hljs-comment">/* IE */</span>&#125;</code></pre><h2 id="3-使用伪元素"><a href="#3-使用伪元素" class="headerlink" title="3.使用伪元素"></a>3.使用伪元素</h2><p>原理很简单，使用伪元素在后面增加清除浮动的盒子。</p><p>在开发中比较常用的方法，拿来即用。</p><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span> &#123;<span class="hljs-comment">/* 触发 hasLayout */</span> <span class="hljs-attribute">zoom</span>: <span class="hljs-number">1</span>; &#125;<span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;    <span class="hljs-attribute">content</span>: <span class="hljs-string">''</span>;    <span class="hljs-attribute">display</span>: block;    <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;    <span class="hljs-attribute">clear</span>: both;    <span class="hljs-attribute">visibility</span>: hidden; &#125;</code></pre><h2 id="4-table-伪元素（最常用）"><a href="#4-table-伪元素（最常用）" class="headerlink" title="4.table+伪元素（最常用）"></a>4.table+伪元素（最常用）</h2><p>利用table表格的属性，当为空时不会占位，简化写法。</p><p>同时table即使没有高度也可以分割开两个盒子的margin，解决边距重叠的情况。</p><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span>,<span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:before</span> &#123;    <span class="hljs-attribute">content</span>: <span class="hljs-string">''</span>;    <span class="hljs-attribute">display</span>: table&#125;<span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span>&#123;<span class="hljs-attribute">clear</span>: both;&#125;<span class="hljs-selector-class">.clearfix</span> &#123;<span class="hljs-comment">/* 兼容IE6,7触发 hasLayout */</span> <span class="hljs-attribute">zoom</span>: <span class="hljs-number">1</span>; &#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
